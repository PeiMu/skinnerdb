package joining.parallel.parallelization.hybrid;

import java.util.Arrays;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * The plan information of the join plan
 * generated by search parallel threads.
 *
 * @author Anonymous
 */
public class JoinPlan {
    /**
     * Finished join order.
     */
    public final int[] joinOrder;
    /**
     * Number of data parallel threads.
     */
    public final int nrThreads;
    /**
     * Finished split table.
     */
    public volatile int splitTable;
    /**
     * Finish flags for different tables.
     */
    public final AtomicBoolean[] finishFlags;
    /**
     * The average reward of given join order.
     */
    public final double reward;
    /**
     * Thread id of the join plan.
     */
    public final int tid;


    public JoinPlan(int[] joinOrder, int nrThreads, int nrTables, double reward, int tid) {
        this.joinOrder = joinOrder;
        this.finishFlags = new AtomicBoolean[nrThreads * nrTables];
        for (int flagCtr = 0; flagCtr < nrThreads * nrTables; flagCtr++) {
            this.finishFlags[flagCtr] = new AtomicBoolean(false);
        }
        this.nrThreads = nrThreads;
        this.reward = reward;
        this.tid = tid;
    }
    /**
     * Set finish flag to True and check
     * whether the join is finished.
     *
     * @param tid           thread id
     * @param splitTable    table to split
     * @return              the flag to be finished
     */
    public boolean setFinished(int tid, int splitTable) {
        int index = splitTable * nrThreads + tid;
        finishFlags[index].set(true);
        for (int threadCtr = 0; threadCtr < nrThreads; threadCtr++) {
            int threadIndex = splitTable * nrThreads + threadCtr;
            if (!finishFlags[threadIndex].get()) {
                return false;
            }
        }
        return true;
    }

    @Override
    public String toString() {
        return "JoinPlan{" +
                "joinOrder=" + Arrays.toString(joinOrder) +
                ", splitTable=" + splitTable +
                ", reward=" + reward +
                '}';
    }
}
